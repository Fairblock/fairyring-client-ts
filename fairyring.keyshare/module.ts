// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgDeleteAuthorizedAddress } from "./types/fairyring/keyshare/tx";
import { MsgCreateLatestPubKey } from "./types/fairyring/keyshare/tx";
import { MsgUpdateAuthorizedAddress } from "./types/fairyring/keyshare/tx";
import { MsgCreateAuthorizedAddress } from "./types/fairyring/keyshare/tx";
import { MsgCreateGeneralKeyShare } from "./types/fairyring/keyshare/tx";
import { MsgRegisterValidator } from "./types/fairyring/keyshare/tx";
import { MsgSendKeyshare } from "./types/fairyring/keyshare/tx";

import { AggregatedKeyShare as typeAggregatedKeyShare} from "./types"
import { AuthorizedAddress as typeAuthorizedAddress} from "./types"
import { Commitments as typeCommitments} from "./types"
import { GeneralKeyShare as typeGeneralKeyShare} from "./types"
import { KeyShare as typeKeyShare} from "./types"
import { KeysharePacketData as typeKeysharePacketData} from "./types"
import { NoData as typeNoData} from "./types"
import { RequestAggrKeysharePacketData as typeRequestAggrKeysharePacketData} from "./types"
import { RequestAggrKeysharePacketAck as typeRequestAggrKeysharePacketAck} from "./types"
import { GetAggrKeysharePacketData as typeGetAggrKeysharePacketData} from "./types"
import { GetAggrKeysharePacketAck as typeGetAggrKeysharePacketAck} from "./types"
import { AggrKeyshareDataPacketData as typeAggrKeyshareDataPacketData} from "./types"
import { AggrKeyshareDataPacketAck as typeAggrKeyshareDataPacketAck} from "./types"
import { Params as typeParams} from "./types"
import { ActivePubKey as typeActivePubKey} from "./types"
import { QueuedPubKey as typeQueuedPubKey} from "./types"
import { KeyShareRequest as typeKeyShareRequest} from "./types"
import { IBCInfo as typeIBCInfo} from "./types"
import { CounterPartyIBCInfo as typeCounterPartyIBCInfo} from "./types"
import { ValidatorSet as typeValidatorSet} from "./types"

export { MsgDeleteAuthorizedAddress, MsgCreateLatestPubKey, MsgUpdateAuthorizedAddress, MsgCreateAuthorizedAddress, MsgCreateGeneralKeyShare, MsgRegisterValidator, MsgSendKeyshare };

type sendMsgDeleteAuthorizedAddressParams = {
  value: MsgDeleteAuthorizedAddress,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateLatestPubKeyParams = {
  value: MsgCreateLatestPubKey,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateAuthorizedAddressParams = {
  value: MsgUpdateAuthorizedAddress,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateAuthorizedAddressParams = {
  value: MsgCreateAuthorizedAddress,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateGeneralKeyShareParams = {
  value: MsgCreateGeneralKeyShare,
  fee?: StdFee,
  memo?: string
};

type sendMsgRegisterValidatorParams = {
  value: MsgRegisterValidator,
  fee?: StdFee,
  memo?: string
};

type sendMsgSendKeyshareParams = {
  value: MsgSendKeyshare,
  fee?: StdFee,
  memo?: string
};


type msgDeleteAuthorizedAddressParams = {
  value: MsgDeleteAuthorizedAddress,
};

type msgCreateLatestPubKeyParams = {
  value: MsgCreateLatestPubKey,
};

type msgUpdateAuthorizedAddressParams = {
  value: MsgUpdateAuthorizedAddress,
};

type msgCreateAuthorizedAddressParams = {
  value: MsgCreateAuthorizedAddress,
};

type msgCreateGeneralKeyShareParams = {
  value: MsgCreateGeneralKeyShare,
};

type msgRegisterValidatorParams = {
  value: MsgRegisterValidator,
};

type msgSendKeyshareParams = {
  value: MsgSendKeyshare,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgDeleteAuthorizedAddress({ value, fee, memo }: sendMsgDeleteAuthorizedAddressParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteAuthorizedAddress: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDeleteAuthorizedAddress({ value: MsgDeleteAuthorizedAddress.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteAuthorizedAddress: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateLatestPubKey({ value, fee, memo }: sendMsgCreateLatestPubKeyParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateLatestPubKey: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateLatestPubKey({ value: MsgCreateLatestPubKey.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateLatestPubKey: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateAuthorizedAddress({ value, fee, memo }: sendMsgUpdateAuthorizedAddressParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateAuthorizedAddress: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateAuthorizedAddress({ value: MsgUpdateAuthorizedAddress.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateAuthorizedAddress: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateAuthorizedAddress({ value, fee, memo }: sendMsgCreateAuthorizedAddressParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateAuthorizedAddress: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateAuthorizedAddress({ value: MsgCreateAuthorizedAddress.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateAuthorizedAddress: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateGeneralKeyShare({ value, fee, memo }: sendMsgCreateGeneralKeyShareParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateGeneralKeyShare: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateGeneralKeyShare({ value: MsgCreateGeneralKeyShare.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateGeneralKeyShare: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRegisterValidator({ value, fee, memo }: sendMsgRegisterValidatorParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRegisterValidator: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRegisterValidator({ value: MsgRegisterValidator.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRegisterValidator: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSendKeyshare({ value, fee, memo }: sendMsgSendKeyshareParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSendKeyshare: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSendKeyshare({ value: MsgSendKeyshare.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSendKeyshare: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgDeleteAuthorizedAddress({ value }: msgDeleteAuthorizedAddressParams): EncodeObject {
			try {
				return { typeUrl: "/fairyring.keyshare.MsgDeleteAuthorizedAddress", value: MsgDeleteAuthorizedAddress.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteAuthorizedAddress: Could not create message: ' + e.message)
			}
		},
		
		msgCreateLatestPubKey({ value }: msgCreateLatestPubKeyParams): EncodeObject {
			try {
				return { typeUrl: "/fairyring.keyshare.MsgCreateLatestPubKey", value: MsgCreateLatestPubKey.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateLatestPubKey: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateAuthorizedAddress({ value }: msgUpdateAuthorizedAddressParams): EncodeObject {
			try {
				return { typeUrl: "/fairyring.keyshare.MsgUpdateAuthorizedAddress", value: MsgUpdateAuthorizedAddress.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateAuthorizedAddress: Could not create message: ' + e.message)
			}
		},
		
		msgCreateAuthorizedAddress({ value }: msgCreateAuthorizedAddressParams): EncodeObject {
			try {
				return { typeUrl: "/fairyring.keyshare.MsgCreateAuthorizedAddress", value: MsgCreateAuthorizedAddress.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateAuthorizedAddress: Could not create message: ' + e.message)
			}
		},
		
		msgCreateGeneralKeyShare({ value }: msgCreateGeneralKeyShareParams): EncodeObject {
			try {
				return { typeUrl: "/fairyring.keyshare.MsgCreateGeneralKeyShare", value: MsgCreateGeneralKeyShare.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateGeneralKeyShare: Could not create message: ' + e.message)
			}
		},
		
		msgRegisterValidator({ value }: msgRegisterValidatorParams): EncodeObject {
			try {
				return { typeUrl: "/fairyring.keyshare.MsgRegisterValidator", value: MsgRegisterValidator.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRegisterValidator: Could not create message: ' + e.message)
			}
		},
		
		msgSendKeyshare({ value }: msgSendKeyshareParams): EncodeObject {
			try {
				return { typeUrl: "/fairyring.keyshare.MsgSendKeyshare", value: MsgSendKeyshare.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSendKeyshare: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						AggregatedKeyShare: getStructure(typeAggregatedKeyShare.fromPartial({})),
						AuthorizedAddress: getStructure(typeAuthorizedAddress.fromPartial({})),
						Commitments: getStructure(typeCommitments.fromPartial({})),
						GeneralKeyShare: getStructure(typeGeneralKeyShare.fromPartial({})),
						KeyShare: getStructure(typeKeyShare.fromPartial({})),
						KeysharePacketData: getStructure(typeKeysharePacketData.fromPartial({})),
						NoData: getStructure(typeNoData.fromPartial({})),
						RequestAggrKeysharePacketData: getStructure(typeRequestAggrKeysharePacketData.fromPartial({})),
						RequestAggrKeysharePacketAck: getStructure(typeRequestAggrKeysharePacketAck.fromPartial({})),
						GetAggrKeysharePacketData: getStructure(typeGetAggrKeysharePacketData.fromPartial({})),
						GetAggrKeysharePacketAck: getStructure(typeGetAggrKeysharePacketAck.fromPartial({})),
						AggrKeyshareDataPacketData: getStructure(typeAggrKeyshareDataPacketData.fromPartial({})),
						AggrKeyshareDataPacketAck: getStructure(typeAggrKeyshareDataPacketAck.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						ActivePubKey: getStructure(typeActivePubKey.fromPartial({})),
						QueuedPubKey: getStructure(typeQueuedPubKey.fromPartial({})),
						KeyShareRequest: getStructure(typeKeyShareRequest.fromPartial({})),
						IBCInfo: getStructure(typeIBCInfo.fromPartial({})),
						CounterPartyIBCInfo: getStructure(typeCounterPartyIBCInfo.fromPartial({})),
						ValidatorSet: getStructure(typeValidatorSet.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			FairyringKeyshare: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;